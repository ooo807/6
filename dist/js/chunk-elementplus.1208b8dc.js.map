{"version":3,"file":"js/chunk-elementplus.1208b8dc.js","mappings":"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","sources":["webpack://test06_/../../../packages/utils/vue/props/runtime.ts","webpack://test06_/../../../packages/components/icon/src/icon.ts","webpack://test06_/../../../internal/build/plugin-vue:export-helper","webpack://test06_/../../../packages/hooks/use-namespace/index.ts","webpack://test06_/../../../packages/utils/types.ts","webpack://test06_/../../../packages/utils/error.ts","webpack://test06_/../../../packages/utils/dom/style.ts","webpack://test06_/../../../packages/components/icon/src/icon.vue","webpack://test06_/../../../packages/utils/vue/install.ts","webpack://test06_/../../../packages/components/icon/index.ts","webpack://test06_/../../../packages/components/button/src/constants.ts","webpack://test06_/../../../packages/hooks/use-deprecated/index.ts","webpack://test06_/../../../packages/components/config-provider/src/constants.ts","webpack://test06_/../../../packages/components/config-provider/src/hooks/use-global-config.ts","webpack://test06_/../../../packages/components/form/src/constants.ts","webpack://test06_/../../../packages/components/form/src/hooks/use-form-item.ts","webpack://test06_/../../../packages/hooks/use-prop/index.ts","webpack://test06_/../../../packages/constants/size.ts","webpack://test06_/../../../packages/hooks/use-size/index.ts","webpack://test06_/../../../packages/components/form/src/hooks/use-form-common-props.ts","webpack://test06_/../../../packages/components/button/src/use-button.ts","webpack://test06_/../../../packages/utils/vue/icon.ts","webpack://test06_/../../../packages/components/button/src/button.ts","webpack://test06_/../../../packages/components/button/src/button-custom.ts","webpack://test06_/../../../packages/components/button/src/button.vue","webpack://test06_/../../../packages/components/button/src/button-group.ts","webpack://test06_/../../../packages/components/button/src/button-group.vue","webpack://test06_/../../../packages/components/button/index.ts"],"sourcesContent":["import { warn } from 'vue'\nimport { fromPairs } from 'lodash-unified'\nimport { isObject } from '../../types'\nimport { hasOwn } from '../../objects'\n\nimport type { PropType } from 'vue'\nimport type {\n  EpProp,\n  EpPropConvert,\n  EpPropFinalized,\n  EpPropInput,\n  EpPropMergeType,\n  IfEpProp,\n  IfNativePropType,\n  NativePropType,\n} from './types'\n\nexport const epPropKey = '__epPropKey'\n\nexport const definePropType = <T>(val: any): PropType<T> => val\n\nexport const isEpProp = (val: unknown): val is EpProp<any, any, any> =>\n  isObject(val) && !!(val as any)[epPropKey]\n\n/**\n * @description Build prop. It can better optimize prop types\n * @description 生成 prop，能更好地优化类型\n * @example\n  // limited options\n  // the type will be PropType<'light' | 'dark'>\n  buildProp({\n    type: String,\n    values: ['light', 'dark'],\n  } as const)\n  * @example\n  // limited options and other types\n  // the type will be PropType<'small' | 'large' | number>\n  buildProp({\n    type: [String, Number],\n    values: ['small', 'large'],\n    validator: (val: unknown): val is number => typeof val === 'number',\n  } as const)\n  @link see more: https://github.com/element-plus/element-plus/pull/3341\n */\nexport const buildProp = <\n  Type = never,\n  Value = never,\n  Validator = never,\n  Default extends EpPropMergeType<Type, Value, Validator> = never,\n  Required extends boolean = false\n>(\n  prop: EpPropInput<Type, Value, Validator, Default, Required>,\n  key?: string\n): EpPropFinalized<Type, Value, Validator, Default, Required> => {\n  // filter native prop type and nested prop, e.g `null`, `undefined` (from `buildProps`)\n  if (!isObject(prop) || isEpProp(prop)) return prop as any\n\n  const { values, required, default: defaultValue, type, validator } = prop\n\n  const _validator =\n    values || validator\n      ? (val: unknown) => {\n          let valid = false\n          let allowedValues: unknown[] = []\n\n          if (values) {\n            allowedValues = Array.from(values)\n            if (hasOwn(prop, 'default')) {\n              allowedValues.push(defaultValue)\n            }\n            valid ||= allowedValues.includes(val)\n          }\n          if (validator) valid ||= validator(val)\n\n          if (!valid && allowedValues.length > 0) {\n            const allowValuesText = [...new Set(allowedValues)]\n              .map((value) => JSON.stringify(value))\n              .join(', ')\n            warn(\n              `Invalid prop: validation failed${\n                key ? ` for prop \"${key}\"` : ''\n              }. Expected one of [${allowValuesText}], got value ${JSON.stringify(\n                val\n              )}.`\n            )\n          }\n          return valid\n        }\n      : undefined\n\n  const epProp: any = {\n    type,\n    required: !!required,\n    validator: _validator,\n    [epPropKey]: true,\n  }\n  if (hasOwn(prop, 'default')) epProp.default = defaultValue\n  return epProp\n}\n\nexport const buildProps = <\n  Props extends Record<\n    string,\n    | { [epPropKey]: true }\n    | NativePropType\n    | EpPropInput<any, any, any, any, any>\n  >\n>(\n  props: Props\n): {\n  [K in keyof Props]: IfEpProp<\n    Props[K],\n    Props[K],\n    IfNativePropType<Props[K], Props[K], EpPropConvert<Props[K]>>\n  >\n} =>\n  fromPairs(\n    Object.entries(props).map(([key, option]) => [\n      key,\n      buildProp(option as any, key),\n    ])\n  ) as any\n","import { buildProps, definePropType } from '@element-plus/utils'\nimport type { ExtractPropTypes } from 'vue'\nimport type Icon from './icon.vue'\n\nexport const iconProps = buildProps({\n  /**\n   * @description SVG icon size, size x size\n   */\n  size: {\n    type: definePropType<number | string>([Number, String]),\n  },\n  /**\n   * @description SVG tag's fill attribute\n   */\n  color: {\n    type: String,\n  },\n} as const)\nexport type IconProps = ExtractPropTypes<typeof iconProps>\nexport type IconInstance = InstanceType<typeof Icon>\n","\nexport default (sfc, props) => {\n  const target = sfc.__vccOpts || sfc;\n  for (const [key, val] of props) {\n    target[key] = val;\n  }\n  return target;\n}\n","import { computed, getCurrentInstance, inject, ref, unref } from 'vue'\n\nimport type { InjectionKey, Ref } from 'vue'\n\nexport const defaultNamespace = 'el'\nconst statePrefix = 'is-'\n\nconst _bem = (\n  namespace: string,\n  block: string,\n  blockSuffix: string,\n  element: string,\n  modifier: string\n) => {\n  let cls = `${namespace}-${block}`\n  if (blockSuffix) {\n    cls += `-${blockSuffix}`\n  }\n  if (element) {\n    cls += `__${element}`\n  }\n  if (modifier) {\n    cls += `--${modifier}`\n  }\n  return cls\n}\n\nexport const namespaceContextKey: InjectionKey<Ref<string | undefined>> =\n  Symbol('namespaceContextKey')\n\nexport const useGetDerivedNamespace = (\n  namespaceOverrides?: Ref<string | undefined>\n) => {\n  const derivedNamespace =\n    namespaceOverrides ||\n    (getCurrentInstance()\n      ? inject(namespaceContextKey, ref(defaultNamespace))\n      : ref(defaultNamespace))\n  const namespace = computed(() => {\n    return unref(derivedNamespace) || defaultNamespace\n  })\n  return namespace\n}\n\nexport const useNamespace = (\n  block: string,\n  namespaceOverrides?: Ref<string | undefined>\n) => {\n  const namespace = useGetDerivedNamespace(namespaceOverrides)\n  const b = (blockSuffix = '') =>\n    _bem(namespace.value, block, blockSuffix, '', '')\n  const e = (element?: string) =>\n    element ? _bem(namespace.value, block, '', element, '') : ''\n  const m = (modifier?: string) =>\n    modifier ? _bem(namespace.value, block, '', '', modifier) : ''\n  const be = (blockSuffix?: string, element?: string) =>\n    blockSuffix && element\n      ? _bem(namespace.value, block, blockSuffix, element, '')\n      : ''\n  const em = (element?: string, modifier?: string) =>\n    element && modifier\n      ? _bem(namespace.value, block, '', element, modifier)\n      : ''\n  const bm = (blockSuffix?: string, modifier?: string) =>\n    blockSuffix && modifier\n      ? _bem(namespace.value, block, blockSuffix, '', modifier)\n      : ''\n  const bem = (blockSuffix?: string, element?: string, modifier?: string) =>\n    blockSuffix && element && modifier\n      ? _bem(namespace.value, block, blockSuffix, element, modifier)\n      : ''\n  const is: {\n    (name: string, state: boolean | undefined): string\n    (name: string): string\n  } = (name: string, ...args: [boolean | undefined] | []) => {\n    const state = args.length >= 1 ? args[0]! : true\n    return name && state ? `${statePrefix}${name}` : ''\n  }\n\n  // for css var\n  // --el-xxx: value;\n  const cssVar = (object: Record<string, string>) => {\n    const styles: Record<string, string> = {}\n    for (const key in object) {\n      if (object[key]) {\n        styles[`--${namespace.value}-${key}`] = object[key]\n      }\n    }\n    return styles\n  }\n  // with block\n  const cssVarBlock = (object: Record<string, string>) => {\n    const styles: Record<string, string> = {}\n    for (const key in object) {\n      if (object[key]) {\n        styles[`--${namespace.value}-${block}-${key}`] = object[key]\n      }\n    }\n    return styles\n  }\n\n  const cssVarName = (name: string) => `--${namespace.value}-${name}`\n  const cssVarBlockName = (name: string) =>\n    `--${namespace.value}-${block}-${name}`\n\n  return {\n    namespace,\n    b,\n    e,\n    m,\n    be,\n    em,\n    bm,\n    bem,\n    is,\n    // css\n    cssVar,\n    cssVarName,\n    cssVarBlock,\n    cssVarBlockName,\n  }\n}\n\nexport type UseNamespaceReturn = ReturnType<typeof useNamespace>\n","import { isArray, isObject, isString } from '@vue/shared'\nimport { isNil } from 'lodash-unified'\n\nexport {\n  isArray,\n  isFunction,\n  isObject,\n  isString,\n  isDate,\n  isPromise,\n  isSymbol,\n  isPlainObject,\n} from '@vue/shared'\nexport { isVNode } from 'vue'\n\nexport const isUndefined = (val: any): val is undefined => val === undefined\nexport const isBoolean = (val: any): val is boolean => typeof val === 'boolean'\nexport const isNumber = (val: any): val is number => typeof val === 'number'\n\nexport const isEmpty = (val: unknown) =>\n  (!val && val !== 0) ||\n  (isArray(val) && val.length === 0) ||\n  (isObject(val) && !Object.keys(val).length)\n\nexport const isElement = (e: unknown): e is Element => {\n  if (typeof Element === 'undefined') return false\n  return e instanceof Element\n}\n\nexport const isPropAbsent = (prop: unknown): prop is null | undefined =>\n  isNil(prop)\n\nexport const isStringNumber = (val: string): boolean => {\n  if (!isString(val)) {\n    return false\n  }\n  return !Number.isNaN(Number(val))\n}\n\nexport const isWindow = (val: unknown): val is Window => val === window\n","import { isString } from './types'\n\nclass ElementPlusError extends Error {\n  constructor(m: string) {\n    super(m)\n    this.name = 'ElementPlusError'\n  }\n}\n\nexport function throwError(scope: string, m: string): never {\n  throw new ElementPlusError(`[${scope}] ${m}`)\n}\n\nexport function debugWarn(err: Error): void\nexport function debugWarn(scope: string, message: string): void\nexport function debugWarn(scope: string | Error, message?: string): void {\n  if (process.env.NODE_ENV !== 'production') {\n    const error: Error = isString(scope)\n      ? new ElementPlusError(`[${scope}] ${message}`)\n      : scope\n    // eslint-disable-next-line no-console\n    console.warn(error)\n  }\n}\n","import { isNumber, isObject, isString, isStringNumber } from '../types'\nimport { isClient } from '../browser'\nimport { camelize } from '../strings'\nimport { entriesOf, keysOf } from '../objects'\nimport { debugWarn } from '../error'\nimport type { CSSProperties } from 'vue'\n\nconst SCOPE = 'utils/dom/style'\n\nexport const classNameToArray = (cls = '') =>\n  cls.split(' ').filter((item) => !!item.trim())\n\nexport const hasClass = (el: Element, cls: string): boolean => {\n  if (!el || !cls) return false\n  if (cls.includes(' ')) throw new Error('className should not contain space.')\n  return el.classList.contains(cls)\n}\n\nexport const addClass = (el: Element, cls: string) => {\n  if (!el || !cls.trim()) return\n  el.classList.add(...classNameToArray(cls))\n}\n\nexport const removeClass = (el: Element, cls: string) => {\n  if (!el || !cls.trim()) return\n  el.classList.remove(...classNameToArray(cls))\n}\n\nexport const getStyle = (\n  element: HTMLElement,\n  styleName: keyof CSSProperties\n): string => {\n  if (!isClient || !element || !styleName) return ''\n\n  let key = camelize(styleName)\n  if (key === 'float') key = 'cssFloat'\n  try {\n    const style = (element.style as any)[key]\n    if (style) return style\n    const computed: any = document.defaultView?.getComputedStyle(element, '')\n    return computed ? computed[key] : ''\n  } catch {\n    return (element.style as any)[key]\n  }\n}\n\nexport const setStyle = (\n  element: HTMLElement,\n  styleName: CSSProperties | keyof CSSProperties,\n  value?: string | number\n) => {\n  if (!element || !styleName) return\n\n  if (isObject(styleName)) {\n    entriesOf(styleName).forEach(([prop, value]) =>\n      setStyle(element, prop, value)\n    )\n  } else {\n    const key: any = camelize(styleName)\n    element.style[key] = value as any\n  }\n}\n\nexport const removeStyle = (\n  element: HTMLElement,\n  style: CSSProperties | keyof CSSProperties\n) => {\n  if (!element || !style) return\n\n  if (isObject(style)) {\n    keysOf(style).forEach((prop) => removeStyle(element, prop))\n  } else {\n    setStyle(element, style, '')\n  }\n}\n\nexport function addUnit(value?: string | number, defaultUnit = 'px') {\n  if (!value) return ''\n  if (isNumber(value) || isStringNumber(value)) {\n    return `${value}${defaultUnit}`\n  } else if (isString(value)) {\n    return value\n  }\n  debugWarn(SCOPE, 'binding value must be a string or number')\n}\n","<template>\n  <i :class=\"ns.b()\" :style=\"style\" v-bind=\"$attrs\">\n    <slot />\n  </i>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed } from 'vue'\nimport { addUnit, isUndefined } from '@element-plus/utils'\nimport { useNamespace } from '@element-plus/hooks'\nimport { iconProps } from './icon'\nimport type { CSSProperties } from 'vue'\n\ndefineOptions({\n  name: 'ElIcon',\n  inheritAttrs: false,\n})\nconst props = defineProps(iconProps)\nconst ns = useNamespace('icon')\n\nconst style = computed<CSSProperties>(() => {\n  const { size, color } = props\n  if (!size && !color) return {}\n\n  return {\n    fontSize: isUndefined(size) ? undefined : addUnit(size),\n    '--color': color,\n  }\n})\n</script>\n","import { NOOP } from '../functions'\n\nimport type { App, Directive } from 'vue'\nimport type { SFCInstallWithContext, SFCWithInstall } from './typescript'\n\nexport const withInstall = <T, E extends Record<string, any>>(\n  main: T,\n  extra?: E\n) => {\n  ;(main as SFCWithInstall<T>).install = (app): void => {\n    for (const comp of [main, ...Object.values(extra ?? {})]) {\n      app.component(comp.name, comp)\n    }\n  }\n\n  if (extra) {\n    for (const [key, comp] of Object.entries(extra)) {\n      ;(main as any)[key] = comp\n    }\n  }\n  return main as SFCWithInstall<T> & E\n}\n\nexport const withInstallFunction = <T>(fn: T, name: string) => {\n  ;(fn as SFCWithInstall<T>).install = (app: App) => {\n    ;(fn as SFCInstallWithContext<T>)._context = app._context\n    app.config.globalProperties[name] = fn\n  }\n\n  return fn as SFCInstallWithContext<T>\n}\n\nexport const withInstallDirective = <T extends Directive>(\n  directive: T,\n  name: string\n) => {\n  ;(directive as SFCWithInstall<T>).install = (app: App): void => {\n    app.directive(name, directive)\n  }\n\n  return directive as SFCWithInstall<T>\n}\n\nexport const withNoopInstall = <T>(component: T) => {\n  ;(component as SFCWithInstall<T>).install = NOOP\n\n  return component as SFCWithInstall<T>\n}\n","import { withInstall } from '@element-plus/utils'\n\nimport Icon from './src/icon.vue'\nimport type { SFCWithInstall } from '@element-plus/utils'\n\nexport const ElIcon: SFCWithInstall<typeof Icon> = withInstall(Icon)\nexport default ElIcon\n\nexport * from './src/icon'\n","import type { InjectionKey } from 'vue'\n\nimport type { ButtonProps } from './button'\n\nexport interface ButtonGroupContext {\n  size?: ButtonProps['size']\n  type?: ButtonProps['type']\n}\n\nexport const buttonGroupContextKey: InjectionKey<ButtonGroupContext> = Symbol(\n  'buttonGroupContextKey'\n)\n","import { unref, watch } from 'vue'\nimport { debugWarn } from '@element-plus/utils'\n\nimport type { MaybeRef } from '@vueuse/core'\n\ntype DeprecationParam = {\n  from: string\n  replacement: string\n  scope: string\n  version: string\n  ref: string\n  type?: 'API' | 'Attribute' | 'Event' | 'Slot'\n}\n\nexport const useDeprecated = (\n  { from, replacement, scope, version, ref, type = 'API' }: DeprecationParam,\n  condition: MaybeRef<boolean>\n) => {\n  watch(\n    () => unref(condition),\n    (val) => {\n      if (val) {\n        debugWarn(\n          scope,\n          `[${type}] ${from} is about to be deprecated in version ${version}, please use ${replacement} instead.\nFor more detail, please visit: ${ref}\n`\n        )\n      }\n    },\n    {\n      immediate: true,\n    }\n  )\n}\n","import type { ConfigProviderProps } from './config-provider-props'\nimport type { InjectionKey, Ref } from 'vue'\n\nexport type ConfigProviderContext = Partial<ConfigProviderProps>\n\nexport const configProviderContextKey: InjectionKey<\n  Ref<ConfigProviderContext>\n> = Symbol()\n","import { computed, getCurrentInstance, inject, provide, ref, unref } from 'vue'\nimport { debugWarn, keysOf } from '@element-plus/utils'\nimport {\n  SIZE_INJECTION_KEY,\n  defaultInitialZIndex,\n  defaultNamespace,\n  emptyValuesContextKey,\n  localeContextKey,\n  namespaceContextKey,\n  useLocale,\n  useNamespace,\n  useZIndex,\n  zIndexContextKey,\n} from '@element-plus/hooks'\nimport { configProviderContextKey } from '../constants'\n\nimport type { MaybeRef } from '@vueuse/core'\nimport type { App, Ref } from 'vue'\nimport type { ConfigProviderContext } from '../constants'\n\n// this is meant to fix global methods like `ElMessage(opts)`, this way we can inject current locale\n// into the component as default injection value.\n// refer to: https://github.com/element-plus/element-plus/issues/2610#issuecomment-887965266\nconst globalConfig = ref<ConfigProviderContext>()\n\nexport function useGlobalConfig<\n  K extends keyof ConfigProviderContext,\n  D extends ConfigProviderContext[K]\n>(\n  key: K,\n  defaultValue?: D\n): Ref<Exclude<ConfigProviderContext[K], undefined> | D>\nexport function useGlobalConfig(): Ref<ConfigProviderContext>\nexport function useGlobalConfig(\n  key?: keyof ConfigProviderContext,\n  defaultValue = undefined\n) {\n  const config = getCurrentInstance()\n    ? inject(configProviderContextKey, globalConfig)\n    : globalConfig\n  if (key) {\n    return computed(() => config.value?.[key] ?? defaultValue)\n  } else {\n    return config\n  }\n}\n\n// for components like `ElMessage` `ElNotification` `ElMessageBox`.\nexport function useGlobalComponentSettings(\n  block: string,\n  sizeFallback?: MaybeRef<ConfigProviderContext['size']>\n) {\n  const config = useGlobalConfig()\n\n  const ns = useNamespace(\n    block,\n    computed(() => config.value?.namespace || defaultNamespace)\n  )\n\n  const locale = useLocale(computed(() => config.value?.locale))\n  const zIndex = useZIndex(\n    computed(() => config.value?.zIndex || defaultInitialZIndex)\n  )\n  const size = computed(() => unref(sizeFallback) || config.value?.size || '')\n  provideGlobalConfig(computed(() => unref(config) || {}))\n\n  return {\n    ns,\n    locale,\n    zIndex,\n    size,\n  }\n}\n\nexport const provideGlobalConfig = (\n  config: MaybeRef<ConfigProviderContext>,\n  app?: App,\n  global = false\n) => {\n  const inSetup = !!getCurrentInstance()\n  const oldConfig = inSetup ? useGlobalConfig() : undefined\n\n  const provideFn = app?.provide ?? (inSetup ? provide : undefined)\n  if (!provideFn) {\n    debugWarn(\n      'provideGlobalConfig',\n      'provideGlobalConfig() can only be used inside setup().'\n    )\n    return\n  }\n\n  const context = computed(() => {\n    const cfg = unref(config)\n    if (!oldConfig?.value) return cfg\n    return mergeConfig(oldConfig.value, cfg)\n  })\n  provideFn(configProviderContextKey, context)\n  provideFn(\n    localeContextKey,\n    computed(() => context.value.locale)\n  )\n  provideFn(\n    namespaceContextKey,\n    computed(() => context.value.namespace)\n  )\n  provideFn(\n    zIndexContextKey,\n    computed(() => context.value.zIndex)\n  )\n\n  provideFn(SIZE_INJECTION_KEY, {\n    size: computed(() => context.value.size || ''),\n  })\n\n  provideFn(\n    emptyValuesContextKey,\n    computed(() => ({\n      emptyValues: context.value.emptyValues,\n      valueOnClear: context.value.valueOnClear,\n    }))\n  )\n\n  if (global || !globalConfig.value) {\n    globalConfig.value = context.value\n  }\n  return context\n}\n\nconst mergeConfig = (\n  a: ConfigProviderContext,\n  b: ConfigProviderContext\n): ConfigProviderContext => {\n  const keys = [...new Set([...keysOf(a), ...keysOf(b)])]\n  const obj: Record<string, any> = {}\n  for (const key of keys) {\n    obj[key] = b[key] !== undefined ? b[key] : a[key]\n  }\n  return obj\n}\n","import type { InjectionKey } from 'vue'\nimport type { FormContext, FormItemContext } from './types'\n\nexport const formContextKey: InjectionKey<FormContext> =\n  Symbol('formContextKey')\nexport const formItemContextKey: InjectionKey<FormItemContext> =\n  Symbol('formItemContextKey')\n","import {\n  computed,\n  inject,\n  onMounted,\n  onUnmounted,\n  ref,\n  toRef,\n  watch,\n} from 'vue'\nimport { useId } from '@element-plus/hooks'\nimport { formContextKey, formItemContextKey } from '../constants'\n\nimport type { ComputedRef, Ref, WatchStopHandle } from 'vue'\nimport type { FormItemContext } from '../types'\n\nexport const useFormItem = () => {\n  const form = inject(formContextKey, undefined)\n  const formItem = inject(formItemContextKey, undefined)\n  return {\n    form,\n    formItem,\n  }\n}\n\nexport type IUseFormItemInputCommonProps = {\n  id?: string\n  label?: string | number | boolean | Record<string, any>\n  ariaLabel?: string | number | boolean | Record<string, any>\n}\n\nexport const useFormItemInputId = (\n  props: Partial<IUseFormItemInputCommonProps>,\n  {\n    formItemContext,\n    disableIdGeneration,\n    disableIdManagement,\n  }: {\n    formItemContext?: FormItemContext\n    disableIdGeneration?: ComputedRef<boolean> | Ref<boolean>\n    disableIdManagement?: ComputedRef<boolean> | Ref<boolean>\n  }\n) => {\n  if (!disableIdGeneration) {\n    disableIdGeneration = ref<boolean>(false)\n  }\n  if (!disableIdManagement) {\n    disableIdManagement = ref<boolean>(false)\n  }\n\n  const inputId = ref<string>()\n  let idUnwatch: WatchStopHandle | undefined = undefined\n\n  const isLabeledByFormItem = computed<boolean>(() => {\n    return !!(\n      !(props.label || props.ariaLabel) &&\n      formItemContext &&\n      formItemContext.inputIds &&\n      formItemContext.inputIds?.length <= 1\n    )\n  })\n\n  // Generate id for ElFormItem label if not provided as prop\n  onMounted(() => {\n    idUnwatch = watch(\n      [toRef(props, 'id'), disableIdGeneration] as any,\n      ([id, disableIdGeneration]: [string, boolean]) => {\n        const newId = id ?? (!disableIdGeneration ? useId().value : undefined)\n        if (newId !== inputId.value) {\n          if (formItemContext?.removeInputId) {\n            inputId.value && formItemContext.removeInputId(inputId.value)\n            if (!disableIdManagement?.value && !disableIdGeneration && newId) {\n              formItemContext.addInputId(newId)\n            }\n          }\n          inputId.value = newId\n        }\n      },\n      { immediate: true }\n    )\n  })\n\n  onUnmounted(() => {\n    idUnwatch && idUnwatch()\n    if (formItemContext?.removeInputId) {\n      inputId.value && formItemContext.removeInputId(inputId.value)\n    }\n  })\n\n  return {\n    isLabeledByFormItem,\n    inputId,\n  }\n}\n","import { computed, getCurrentInstance } from 'vue'\nimport type { ComputedRef } from 'vue'\n\nexport const useProp = <T>(name: string): ComputedRef<T | undefined> => {\n  const vm = getCurrentInstance()\n  return computed(() => (vm?.proxy?.$props as any)?.[name])\n}\n","export const componentSizes = ['', 'default', 'small', 'large'] as const\n\nexport type ComponentSize = typeof componentSizes[number]\n\nexport const componentSizeMap = {\n  large: 40,\n  default: 32,\n  small: 24,\n} as const\n","import { computed, inject, unref } from 'vue'\nimport { buildProp } from '@element-plus/utils'\nimport { componentSizes } from '@element-plus/constants'\n\nimport type { InjectionKey, Ref } from 'vue'\nimport type { ComponentSize } from '@element-plus/constants'\n\nexport const useSizeProp = buildProp({\n  type: String,\n  values: componentSizes,\n  required: false,\n} as const)\n\nexport const useSizeProps = {\n  size: useSizeProp,\n}\n\nexport interface SizeContext {\n  size: Ref<ComponentSize>\n}\n\nexport const SIZE_INJECTION_KEY: InjectionKey<SizeContext> = Symbol('size')\n\nexport const useGlobalSize = () => {\n  const injectedSize = inject(SIZE_INJECTION_KEY, {} as SizeContext)\n\n  return computed<ComponentSize>(() => {\n    return unref(injectedSize.size) || ''\n  })\n}\n","import { computed, inject, ref, unref } from 'vue'\nimport { useGlobalSize, useProp } from '@element-plus/hooks'\nimport { formContextKey, formItemContextKey } from '../constants'\n\nimport type { ComponentSize } from '@element-plus/constants'\nimport type { MaybeRef } from '@vueuse/core'\n\nexport const useFormSize = (\n  fallback?: MaybeRef<ComponentSize | undefined>,\n  ignore: Partial<Record<'prop' | 'form' | 'formItem' | 'global', boolean>> = {}\n) => {\n  const emptyRef = ref(undefined)\n\n  const size = ignore.prop ? emptyRef : useProp<ComponentSize>('size')\n  const globalConfig = ignore.global ? emptyRef : useGlobalSize()\n  const form = ignore.form\n    ? { size: undefined }\n    : inject(formContextKey, undefined)\n  const formItem = ignore.formItem\n    ? { size: undefined }\n    : inject(formItemContextKey, undefined)\n\n  return computed(\n    (): ComponentSize =>\n      size.value ||\n      unref(fallback) ||\n      formItem?.size ||\n      form?.size ||\n      globalConfig.value ||\n      ''\n  )\n}\n\nexport const useFormDisabled = (fallback?: MaybeRef<boolean | undefined>) => {\n  const disabled = useProp<boolean>('disabled')\n  const form = inject(formContextKey, undefined)\n  return computed(\n    () => disabled.value || unref(fallback) || form?.disabled || false\n  )\n}\n\n// These exports are used for preventing breaking changes\nexport const useSize = useFormSize\nexport const useDisabled = useFormDisabled\n","import { Text, computed, inject, ref, useSlots } from 'vue'\nimport {\n  useFormDisabled,\n  useFormItem,\n  useFormSize,\n} from '@element-plus/components/form'\nimport { useGlobalConfig } from '@element-plus/components/config-provider'\nimport { useDeprecated } from '@element-plus/hooks'\nimport { buttonGroupContextKey } from './constants'\n\nimport type { SetupContext } from 'vue'\nimport type { ButtonEmits, ButtonProps } from './button'\n\nexport const useButton = (\n  props: ButtonProps,\n  emit: SetupContext<ButtonEmits>['emit']\n) => {\n  useDeprecated(\n    {\n      from: 'type.text',\n      replacement: 'link',\n      version: '3.0.0',\n      scope: 'props',\n      ref: 'https://element-plus.org/en-US/component/button.html#button-attributes',\n    },\n    computed(() => props.type === 'text')\n  )\n\n  const buttonGroupContext = inject(buttonGroupContextKey, undefined)\n  const globalConfig = useGlobalConfig('button')\n  const { form } = useFormItem()\n  const _size = useFormSize(computed(() => buttonGroupContext?.size))\n  const _disabled = useFormDisabled()\n  const _ref = ref<HTMLButtonElement>()\n  const slots = useSlots()\n\n  const _type = computed(() => props.type || buttonGroupContext?.type || '')\n  const autoInsertSpace = computed(\n    () => props.autoInsertSpace ?? globalConfig.value?.autoInsertSpace ?? false\n  )\n\n  const _props = computed(() => {\n    if (props.tag === 'button') {\n      return {\n        ariaDisabled: _disabled.value || props.loading,\n        disabled: _disabled.value || props.loading,\n        autofocus: props.autofocus,\n        type: props.nativeType,\n      }\n    }\n    return {}\n  })\n\n  // add space between two characters in Chinese\n  const shouldAddSpace = computed(() => {\n    const defaultSlot = slots.default?.()\n    if (autoInsertSpace.value && defaultSlot?.length === 1) {\n      const slot = defaultSlot[0]\n      if (slot?.type === Text) {\n        const text = slot.children as string\n        return /^\\p{Unified_Ideograph}{2}$/u.test(text.trim())\n      }\n    }\n    return false\n  })\n\n  const handleClick = (evt: MouseEvent) => {\n    if (_disabled.value || props.loading) {\n      evt.stopPropagation()\n      return\n    }\n    if (props.nativeType === 'reset') {\n      form?.resetFields()\n    }\n    emit('click', evt)\n  }\n\n  return {\n    _disabled,\n    _size,\n    _type,\n    _ref,\n    _props,\n    shouldAddSpace,\n    handleClick,\n  }\n}\n","import {\n  CircleCheck,\n  CircleClose,\n  CircleCloseFilled,\n  Close,\n  InfoFilled,\n  Loading,\n  SuccessFilled,\n  WarningFilled,\n} from '@element-plus/icons-vue'\nimport { definePropType } from './props'\n\nimport type { Component } from 'vue'\n\nexport const iconPropType = definePropType<string | Component>([\n  String,\n  Object,\n  Function,\n])\n\nexport const CloseComponents = {\n  Close,\n}\n\nexport const TypeComponents = {\n  Close,\n  SuccessFilled,\n  InfoFilled,\n  WarningFilled,\n  CircleCloseFilled,\n}\n\nexport const TypeComponentsMap = {\n  success: SuccessFilled,\n  warning: WarningFilled,\n  error: CircleCloseFilled,\n  info: InfoFilled,\n}\n\nexport const ValidateComponentsMap = {\n  validating: Loading,\n  success: CircleCheck,\n  error: CircleClose,\n}\n","import { useSizeProp } from '@element-plus/hooks'\nimport { buildProps, definePropType, iconPropType } from '@element-plus/utils'\nimport { Loading } from '@element-plus/icons-vue'\nimport type { Component, ExtractPropTypes } from 'vue'\n\nexport const buttonTypes = [\n  'default',\n  'primary',\n  'success',\n  'warning',\n  'info',\n  'danger',\n  /**\n   * @deprecated\n   * Text type will be deprecated in the next major version (3.0.0)\n   */\n  'text',\n  '',\n] as const\nexport const buttonNativeTypes = ['button', 'submit', 'reset'] as const\n\nexport const buttonProps = buildProps({\n  /**\n   * @description button size\n   */\n  size: useSizeProp,\n  /**\n   * @description disable the button\n   */\n  disabled: Boolean,\n  /**\n   * @description button type\n   */\n  type: {\n    type: String,\n    values: buttonTypes,\n    default: '',\n  },\n  /**\n   * @description icon component\n   */\n  icon: {\n    type: iconPropType,\n  },\n  /**\n   * @description native button type\n   */\n  nativeType: {\n    type: String,\n    values: buttonNativeTypes,\n    default: 'button',\n  },\n  /**\n   * @description determine whether it's loading\n   */\n  loading: Boolean,\n  /**\n   * @description customize loading icon component\n   */\n  loadingIcon: {\n    type: iconPropType,\n    default: () => Loading,\n  },\n  /**\n   * @description determine whether it's a plain button\n   */\n  plain: Boolean,\n  /**\n   * @description determine whether it's a text button\n   */\n  text: Boolean,\n  /**\n   * @description determine whether it's a link button\n   */\n  link: Boolean,\n  /**\n   * @description determine whether the text button background color is always on\n   */\n  bg: Boolean,\n  /**\n   * @description native button autofocus\n   */\n  autofocus: Boolean,\n  /**\n   * @description determine whether it's a round button\n   */\n  round: Boolean,\n  /**\n   * @description determine whether it's a circle button\n   */\n  circle: Boolean,\n  /**\n   * @description custom button color, automatically calculate `hover` and `active` color\n   */\n  color: String,\n  /**\n   * @description dark mode, which automatically converts `color` to dark mode colors\n   */\n  dark: Boolean,\n  /**\n   * @description automatically insert a space between two chinese characters\n   */\n  autoInsertSpace: {\n    type: Boolean,\n    default: undefined,\n  },\n  /**\n   * @description custom element tag\n   */\n  tag: {\n    type: definePropType<string | Component>([String, Object]),\n    default: 'button',\n  },\n} as const)\nexport const buttonEmits = {\n  click: (evt: MouseEvent) => evt instanceof MouseEvent,\n}\n\nexport type ButtonProps = ExtractPropTypes<typeof buttonProps>\nexport type ButtonEmits = typeof buttonEmits\n\nexport type ButtonType = ButtonProps['type']\nexport type ButtonNativeType = ButtonProps['nativeType']\n\nexport interface ButtonConfigContext {\n  autoInsertSpace?: boolean\n}\n","import { computed } from 'vue'\nimport { TinyColor } from '@ctrl/tinycolor'\nimport { useNamespace } from '@element-plus/hooks'\nimport { useFormDisabled } from '@element-plus/components/form'\nimport type { ButtonProps } from './button'\n\nexport function darken(color: TinyColor, amount = 20) {\n  return color.mix('#141414', amount).toString()\n}\n\nexport function useButtonCustomStyle(props: ButtonProps) {\n  const _disabled = useFormDisabled()\n  const ns = useNamespace('button')\n\n  // calculate hover & active color by custom color\n  // only work when custom color\n  return computed(() => {\n    let styles: Record<string, string> = {}\n\n    let buttonColor = props.color\n\n    if (buttonColor) {\n      const match = (buttonColor as string).match(/var\\((.*?)\\)/)\n      if (match) {\n        buttonColor = window\n          .getComputedStyle(window.document.documentElement)\n          .getPropertyValue(match[1])\n      }\n      const color = new TinyColor(buttonColor)\n      const activeBgColor = props.dark\n        ? color.tint(20).toString()\n        : darken(color, 20)\n\n      if (props.plain) {\n        styles = ns.cssVarBlock({\n          'bg-color': props.dark\n            ? darken(color, 90)\n            : color.tint(90).toString(),\n          'text-color': buttonColor,\n          'border-color': props.dark\n            ? darken(color, 50)\n            : color.tint(50).toString(),\n          'hover-text-color': `var(${ns.cssVarName('color-white')})`,\n          'hover-bg-color': buttonColor,\n          'hover-border-color': buttonColor,\n          'active-bg-color': activeBgColor,\n          'active-text-color': `var(${ns.cssVarName('color-white')})`,\n          'active-border-color': activeBgColor,\n        })\n\n        if (_disabled.value) {\n          styles[ns.cssVarBlockName('disabled-bg-color')] = props.dark\n            ? darken(color, 90)\n            : color.tint(90).toString()\n          styles[ns.cssVarBlockName('disabled-text-color')] = props.dark\n            ? darken(color, 50)\n            : color.tint(50).toString()\n          styles[ns.cssVarBlockName('disabled-border-color')] = props.dark\n            ? darken(color, 80)\n            : color.tint(80).toString()\n        }\n      } else {\n        const hoverBgColor = props.dark\n          ? darken(color, 30)\n          : color.tint(30).toString()\n        const textColor = color.isDark()\n          ? `var(${ns.cssVarName('color-white')})`\n          : `var(${ns.cssVarName('color-black')})`\n        styles = ns.cssVarBlock({\n          'bg-color': buttonColor,\n          'text-color': textColor,\n          'border-color': buttonColor,\n          'hover-bg-color': hoverBgColor,\n          'hover-text-color': textColor,\n          'hover-border-color': hoverBgColor,\n          'active-bg-color': activeBgColor,\n          'active-border-color': activeBgColor,\n        })\n\n        if (_disabled.value) {\n          const disabledButtonColor = props.dark\n            ? darken(color, 50)\n            : color.tint(50).toString()\n          styles[ns.cssVarBlockName('disabled-bg-color')] = disabledButtonColor\n          styles[ns.cssVarBlockName('disabled-text-color')] = props.dark\n            ? 'rgba(255, 255, 255, 0.5)'\n            : `var(${ns.cssVarName('color-white')})`\n          styles[ns.cssVarBlockName('disabled-border-color')] =\n            disabledButtonColor\n        }\n      }\n    }\n\n    return styles\n  })\n}\n","<template>\n  <component\n    :is=\"tag\"\n    ref=\"_ref\"\n    v-bind=\"_props\"\n    :class=\"buttonKls\"\n    :style=\"buttonStyle\"\n    @click=\"handleClick\"\n  >\n    <template v-if=\"loading\">\n      <slot v-if=\"$slots.loading\" name=\"loading\" />\n      <el-icon v-else :class=\"ns.is('loading')\">\n        <component :is=\"loadingIcon\" />\n      </el-icon>\n    </template>\n    <el-icon v-else-if=\"icon || $slots.icon\">\n      <component :is=\"icon\" v-if=\"icon\" />\n      <slot v-else name=\"icon\" />\n    </el-icon>\n    <span\n      v-if=\"$slots.default\"\n      :class=\"{ [ns.em('text', 'expand')]: shouldAddSpace }\"\n    >\n      <slot />\n    </span>\n  </component>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed } from 'vue'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { useNamespace } from '@element-plus/hooks'\nimport { useButton } from './use-button'\nimport { buttonEmits, buttonProps } from './button'\nimport { useButtonCustomStyle } from './button-custom'\n\ndefineOptions({\n  name: 'ElButton',\n})\n\nconst props = defineProps(buttonProps)\nconst emit = defineEmits(buttonEmits)\n\nconst buttonStyle = useButtonCustomStyle(props)\nconst ns = useNamespace('button')\nconst { _ref, _size, _type, _disabled, _props, shouldAddSpace, handleClick } =\n  useButton(props, emit)\nconst buttonKls = computed(() => [\n  ns.b(),\n  ns.m(_type.value),\n  ns.m(_size.value),\n  ns.is('disabled', _disabled.value),\n  ns.is('loading', props.loading),\n  ns.is('plain', props.plain),\n  ns.is('round', props.round),\n  ns.is('circle', props.circle),\n  ns.is('text', props.text),\n  ns.is('link', props.link),\n  ns.is('has-bg', props.bg),\n])\n\ndefineExpose({\n  /** @description button html element */\n  ref: _ref,\n  /** @description button size */\n  size: _size,\n  /** @description button type */\n  type: _type,\n  /** @description button disabled */\n  disabled: _disabled,\n  /** @description whether adding space */\n  shouldAddSpace,\n})\n</script>\n","import { buttonProps } from './button'\n\nimport type { ExtractPropTypes } from 'vue'\n\nexport const buttonGroupProps = {\n  /**\n   * @description control the size of buttons in this button-group\n   */\n  size: buttonProps.size,\n  /**\n   * @description control the type of buttons in this button-group\n   */\n  type: buttonProps.type,\n} as const\nexport type ButtonGroupProps = ExtractPropTypes<typeof buttonGroupProps>\n","<template>\n  <div :class=\"ns.b('group')\">\n    <slot />\n  </div>\n</template>\n<script lang=\"ts\" setup>\nimport { provide, reactive, toRef } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { buttonGroupProps } from './button-group'\nimport { buttonGroupContextKey } from './constants'\n\ndefineOptions({\n  name: 'ElButtonGroup',\n})\nconst props = defineProps(buttonGroupProps)\nprovide(\n  buttonGroupContextKey,\n  reactive({\n    size: toRef(props, 'size'),\n    type: toRef(props, 'type'),\n  })\n)\nconst ns = useNamespace('button')\n</script>\n","import { withInstall, withNoopInstall } from '@element-plus/utils'\nimport Button from './src/button.vue'\nimport ButtonGroup from './src/button-group.vue'\nimport type { SFCWithInstall } from '@element-plus/utils'\n\nexport const ElButton: SFCWithInstall<typeof Button> & {\n  ButtonGroup: typeof ButtonGroup\n} = withInstall(Button, {\n  ButtonGroup,\n})\nexport const ElButtonGroup: SFCWithInstall<typeof ButtonGroup> =\n  withNoopInstall(ButtonGroup)\nexport default ElButton\n\nexport * from './src/button'\nexport * from './src/constants'\nexport type { ButtonInstance, ButtonGroupInstance } from './src/instance'\n"],"names":["epPropKey","definePropType","val","isEpProp","isObject","buildProp","prop","key","values","required","default","defaultValue","type","validator","_validator","valid","allowedValues","Array","from","hasOwn","push","includes","length","allowValuesText","Set","map","value","JSON","stringify","join","warn","epProp","buildProps","props","fromPairs","Object","entries","option","iconProps","size","Number","String","color","_export_sfc","sfc","target","__vccOpts","defaultNamespace","statePrefix","_bem","namespace","block","blockSuffix","element","modifier","cls","namespaceContextKey","Symbol","useGetDerivedNamespace","namespaceOverrides","derivedNamespace","getCurrentInstance","inject","ref","computed","unref","useNamespace","b","e","m","be","em","bm","bem","is","name","args","state","cssVar","object","styles","cssVarBlock","cssVarName","cssVarBlockName","isUndefined","isNumber","isStringNumber","isString","isNaN","Error","debugWarn","scope","message","process","SCOPE","addUnit","defaultUnit","inheritAttrs","ns","style","fontSize","withInstall","main","extra","install","app","comp","component","withNoopInstall","NOOP","ElIcon","Icon","buttonGroupContextKey","useDeprecated","replacement","version","condition","watch","immediate","configProviderContextKey","globalConfig","useGlobalConfig","config","_a","_b","formContextKey","formItemContextKey","useFormItem","form","formItem","useProp","vm","proxy","$props","componentSizes","useSizeProp","SIZE_INJECTION_KEY","useGlobalSize","injectedSize","useFormSize","fallback","ignore","emptyRef","global","useFormDisabled","disabled","useButton","emit","buttonGroupContext","_size","_disabled","_ref","slots","useSlots","_type","autoInsertSpace","_c","_props","tag","ariaDisabled","loading","autofocus","nativeType","shouldAddSpace","defaultSlot","call","slot","Text","text","children","test","trim","handleClick","evt","stopPropagation","resetFields","iconPropType","Function","buttonTypes","Close","CircleCloseFilled","SuccessFilled","WarningFilled","InfoFilled","Loading","CircleCheck","CircleClose","buttonNativeTypes","buttonProps","Boolean","icon","loadingIcon","plain","link","bg","round","circle","dark","buttonEmits","click","MouseEvent","darken","amount","mix","toString","useButtonCustomStyle","buttonColor","match","window","getComputedStyle","document","documentElement","getPropertyValue","TinyColor","activeBgColor","tint","hoverBgColor","textColor","isDark","disabledButtonColor","buttonStyle","buttonKls","expose","_ctx","_cache","openBlock","createBlock","resolveDynamicComponent","mergeProps","ref_key","buttonGroupProps","provide","reactive","toRef","createElementBlock","class","normalizeClass","ElButton","Button","ButtonGroup"],"sourceRoot":""}